# -*- coding: utf-8 -*-
"""classification_problem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k35oTC-vURHtTjTShA_eAzsqiTe5huI-
"""

import pandas as pd
import numpy as np

heart_disease  =pd.read_csv("heart.csv")
heart_disease.head()

#import the linear svc estimator class
from sklearn.svm import LinearSVC
from sklearn.model_selection import train_test_split
#setup randomSeed
np.random.seed(42)
#make the data
x=heart_disease.drop("target",axis=1)
y=heart_disease["target"]

#split data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
#instantiate linear svc
clf = LinearSVC()
clf.fit(x_train,y_train)
#evaLUAT
clf.score(x_test,y_test)

#import the linear svc estimator class
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
#setup randomSeed
np.random.seed(42)
#make the data
x=heart_disease.drop("target",axis=1)
y=heart_disease["target"]

#split data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
#instantiate random forest classifier
clf = RandomForestClassifier()
clf.fit(x_train,y_train)
#evaLUAT
clf.score(x_test,y_test)

#import the linear svc estimator class
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
#setup randomSeed
np.random.seed(42)
#make the data
x=heart_disease.drop("target",axis=1)
y=heart_disease["target"]

#split data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
#instantiate random forest classifier
clf = RandomForestClassifier()
#fit the model  to data
clf.fit(x_train,y_train)
#evaLUAT
clf.score(x_test,y_test)

x.head()

#make predictions using ML model
clf.predict(x_test)

np.array(y_test)

#compare predictions to truth labels to evaluate thhe model
y_preds = clf.predict(x_test)
np.mean(y_preds == y_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_preds)

#make predictions with predict_proba() it returns of a classification label
clf.predict_proba(x_test[:5])

#lets predict
clf.predict(x_test[:5])

#predictoion can alsobe done via regression
from sklearn.datasets import fetch_california_housing
housing = fetch_california_housing()
housing

housing_df = pd.DataFrame(housing["data"],columns=housing["feature_names"])
housing_df

housing_df["target"] = housing["target"]

housing_df

from sklearn.ensemble import RandomForestRegressor

np.random.seed(42)
#create data
x=housing_df.drop("target",axis=1)
y=housing_df["target"]
#split and  train test
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2)
#create model instance
model =  RandomForestRegressor()
#fit model to data
model.fit(x_train,y_train)
#make prediction
y_pred = model.predict(x_test)

y_preds[:10]

np.array(y_test[:10])

y_preds

y_test

len(y_preds)

len(y_test)

from sklearn.ensemble import RandomForestClassifier
np.random.seed(42)
#create x and y
x=heart_disease.drop("target",axis=1)
y=heart_disease["target"]
#create train/test
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
clf = RandomForestClassifier(n_estimators=100)
clf.fit(x_train,y_train)

#the highest value for the score method is 1.0
clf.score(x_train,y_train)

clf.score(x_test,y_test)

#evaluating a model using the score parameter
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier
np.random.seed(42)
x=heart_disease.drop("target",axis=1)
y=heart_disease["target"]
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)
clf =RandomForestClassifier()
clf.fit(x_train,y_train)

clf.score(x_test,y_test)

cross_val_score(clf,x,y)

