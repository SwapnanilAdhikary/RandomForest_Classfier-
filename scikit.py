# -*- coding: utf-8 -*-
"""scikit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dhX6x995AQgxec3OAoA6qptpFxY2UF5L
"""

an end to end scikit learn workflow

import pandas as pd
heart_disease = pd.read_csv("heart-disease.csv")
heart_disease
import numpy as np

# create x(feature matrix)
x=heart_disease.drop("target",axis=1)
#create y(labels)
y=heart_disease["target"]

from sklearn.ensemble import RandomForestClassifier
# Instantiate the RandomForestClassifier
clf = RandomForestClassifier()
# Get the default hyperparameters
params = clf.get_params()
# Print the parameters
print(params)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)

clf.fit(x_train,y_train)

#make a prediction
x_test

y_test

#prediction
y_preds = clf.predict(x_test)
y_preds

#evaluation the model on test data and train data
clf.score(x_train,y_train)

clf.score(x_test,y_test)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
print(classification_report(y_test,y_preds))

confusion_matrix(y_test,y_preds)

accuracy_score(y_test,y_preds)

#improve the model
#try diffent amount of n_estimators
np.random.seed(42)
for i in range(10,100,10):
  print(f"trying model with {i} estimators...")
  clf=RandomForestClassifier(n_estimators=i).fit(x_train,y_train)
  print(f"model accuracy on test set:{clf.score(x_test,y_test)*100:.2f}%")
  print(" ")

#save a model  and load it
import pickle
pickle.dump(clf,open("random_forest_model_1.pkl","wb"))

loaded_model = pickle.load(open("random_forest_model_1.pkl","rb"))
loaded_model.score(x_test,y_test)

